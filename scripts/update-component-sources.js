#!/usr/bin/env node

/**
 * Script to update inline component sources from actual component files
 * This ensures the documentation shows the latest component code
 */

const fs = require('fs');
const path = require('path');

const COMPONENTS_DIR = path.join(__dirname, '../src/components/ui');
const OUTPUT_FILE = path.join(__dirname, '../src/lib/component-sources.ts');

// Components to include in the inline sources
const COMPONENT_FILES = [
  'button.tsx',
  'badge.tsx',
  'card.tsx',
  'input.tsx',
  'label.tsx',
  'alert.tsx',
  'checkbox.tsx',
  'textarea.tsx',
  'select.tsx',
  'dialog.tsx',
  'popover.tsx',
  'tooltip.tsx',
  'tabs.tsx',
  'accordion.tsx',
  'avatar.tsx',
  'progress.tsx',
  'slider.tsx',
  'switch.tsx',
  'table.tsx',
  'form.tsx',
  'calendar.tsx',
  'command.tsx',
  // Add more as needed
];

function escapeString(str) {
  return str
    .replace(/\\/g, '\\\\')
    .replace(/`/g, '\\`')
    .replace(/\${/g, '\\${');
}

function getComponentDisplayName(filename) {
  // Convert filename to display name (e.g., 'button.tsx' -> 'Button')
  const baseName = path.basename(filename, '.tsx');
  return baseName.charAt(0).toUpperCase() + baseName.slice(1);
}

function generateSourcesFile() {
  const sources = {};
  
  // Read each component file
  for (const filename of COMPONENT_FILES) {
    const filePath = path.join(COMPONENTS_DIR, filename);
    
    if (fs.existsSync(filePath)) {
      try {
        const content = fs.readFileSync(filePath, 'utf-8');
        const displayName = getComponentDisplayName(filename);
        sources[displayName] = escapeString(content);
        console.log(`‚úÖ Processed ${displayName} from ${filename}`);
      } catch (error) {
        console.error(`‚ùå Error reading ${filename}:`, error.message);
      }
    } else {
      console.warn(`‚ö†Ô∏è  File not found: ${filename}`);
    }
  }
  
  // Generate the TypeScript file content
  const fileContent = `// Fallback component sources for when file fetching is not available
// This file is auto-generated by scripts/update-component-sources.js
// Run "node scripts/update-component-sources.js" to update

export const COMPONENT_SOURCES: Record<string, string> = {
${Object.entries(sources).map(([name, source]) => 
  `  '${name}': \`${source}\`,`
).join('\n\n')}
};

/**
 * Gets component source code from the inline sources
 */
export function getInlineComponentSource(componentName: string): string | null {
  return COMPONENT_SOURCES[componentName] || null;
}

/**
 * Checks if inline source is available for a component
 */
export function hasInlineComponentSource(componentName: string): boolean {
  return componentName in COMPONENT_SOURCES;
}
`;

  // Write the file
  fs.writeFileSync(OUTPUT_FILE, fileContent, 'utf-8');
  console.log(`\nüéâ Successfully updated ${OUTPUT_FILE}`);
  console.log(`üìä Processed ${Object.keys(sources).length} components`);
}

function main() {
  console.log('üîÑ Updating component sources...\n');
  
  // Ensure components directory exists
  if (!fs.existsSync(COMPONENTS_DIR)) {
    console.error(`‚ùå Components directory not found: ${COMPONENTS_DIR}`);
    process.exit(1);
  }
  
  try {
    generateSourcesFile();
  } catch (error) {
    console.error('‚ùå Error generating sources file:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { generateSourcesFile }; 